{"version":3,"sources":["components/views/LandingPage/LandingPage.js","components/views/SearchPage/Sections/DragList.js","components/views/SearchPage/Sections/VerticalList.js","components/views/SearchPage/Sections/Chart.js","components/views/SearchPage/Sections/Info.js","components/views/SearchPage/SearchPage.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","Input","LandingPage","props","useState","className","style","fontsize","width","placeholder","onSearch","e","test","indexOf","history","push","pathname","state","youtubeUrl","message","error","enterButton","Tabs","TabPane","DragList","VerticalList","badComments","itemData","setitemData","clickedAll","setClickedAll","selectedItemIndex","setSelectedItemIndex","useEffect","setDefaultItemData","tmpItemData","key","key_2","Number","tmp","channelId","nickName","comment","predict","selected","cancelItemFromIndex","indx","includes","tmpSelectedItemIndex","tmpIndx","splice","selectItemFromIndex","backgroundColor","onClickDelete","slice","deleteItemFromIndex","display","marginBottom","textAlign","onClick","i","length","marginRight","type","setAiItemData","marginTop","marginLeft","tmpArry","selectedChannelId","success","navigator","clipboard","writeText","itemLayout","dataSource","renderItem","item","Item","actions","Meta","title","href","target","description","Chart","info","config","height","autoFit","percent","num_of_bad_comments","num_of_comments","color","Info","value","updated_time","axios","require","antIcon","LoadingOutlined","fontSize","spin","SearchPage","location","youtubeId","substring","console","log","setChannelId","setBadComments","setInfo","get","then","response","data","channel_id","JSON","parse","bad_comments","catch","err","span","offset","justifyContent","alignItems","minHeight","indicator","App","fallback","paddingTop","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fac3cb9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Input, message } from 'antd';\n\nconst { Search } = Input;\n\nconst onSearch = (props,e) => {\n    let regex = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    \n    if(regex.test(e)) {\n        if(e.indexOf(\"https://www.youtube.com/watch?\") != -1) {\n            props.history.push({\n                pathname: '/search',\n                state: {youtubeUrl : e}\n            });\n        } else {\n            message.error(\"올바른 Youtbe 링크가 아닙니다.\");\n        }\n    } else {\n        message.error(\"올바른 URL 주소가 아닙니다.\");\n    }\n};\n\nfunction LandingPage(props) {\n    const [youtubeUrl, setYoutubeUrl] = useState(\"\")\n    return (\n        <>\n            <div className=\"app\" style={{ fontsize: '10px' }}>\n                <Search style={{ width: '30%' }} \n                        placeholder=\"input youtube-link\" \n                        onSearch={(e) => onSearch(props,e)} \n                        enterButton />\n            </div>\n        </>\n    )\n}\n\nexport default LandingPage\n","import React, { useState, useEffect } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { Input } from 'antd';\r\nimport { Button } from 'antd';\r\nimport { Tabs, Divider, Checkbox, message } from 'antd';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nconst columnsName = [\r\n  \"Bad\",\r\n  \"Good\",\r\n  \"Vague\",\r\n];\r\n\r\n//드래그가 끝났을 때 호출되는 함수\r\nconst onDragEnd = (result, columns, setColumns) => {\r\n  if (!result.destination) return;\r\n  const { source, destination } = result;\r\n  \r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumn = columns[source.droppableId];\r\n    const destColumn = columns[destination.droppableId];\r\n    const sourceItems = [...sourceColumn.items];\r\n    const destItems = [...destColumn.items];\r\n    const [removed] = sourceItems.splice(source.index, 1);\r\n    destItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...sourceColumn,\r\n        items: sourceItems\r\n      },\r\n      [destination.droppableId]: {\r\n        ...destColumn,\r\n        items: destItems\r\n      }\r\n    });\r\n  } else {\r\n    const column = columns[source.droppableId];\r\n    const copiedItems = [...column.items];\r\n    const [removed] = copiedItems.splice(source.index, 1);\r\n    copiedItems.splice(destination.index, 0, removed);\r\n    setColumns({\r\n      ...columns,\r\n      [source.droppableId]: {\r\n        ...column,\r\n        items: copiedItems\r\n      }\r\n    });\r\n  }\r\n\r\n};\r\n\r\nfunction DragList(props) {\r\n  //console.log(props.BadComments);\r\n  const [columns, setColumns] = useState({});\r\n  const [BadComments, setBadComments] = useState({})\r\n  const [channels, setChannels] = useState({\r\n    \"Bad\": [],\r\n    \"Good\": [],\r\n    \"Vague\": []\r\n  })\r\n  const [nowTabKey, setnowTabKey] = useState(\"\");\r\n\r\n  //Tab의 콘텐츠 업데이트 함수\r\n  const updateTabContents = () => {\r\n    var channelsTmp = channels\r\n    for (var key in columns) {\r\n      // console.log(columns)\r\n      // console.log(key)\r\n      var name = columns[key].name\r\n      // console.log(name)\r\n      channelsTmp[name] = []\r\n      // console.log(channelsTmp)\r\n      for (var channelKey in columns[key].items) {\r\n        channelsTmp[name].push(\"https://www.youtube.com/channel/\"+ columns[key].items[channelKey].id+\"\\n\")\r\n      }\r\n    }\r\n    setChannels({...channelsTmp})\r\n  }\r\n\r\n  const success = () => {\r\n    if (channels[nowTabKey].length == 0) {\r\n      message.error(nowTabKey + \"탭의 채널 주소가 없습니다.\");\r\n    } else {\r\n      // console.log(channels[nowTabKey])\r\n      message.success(nowTabKey + \"탭의 채널 주소가 클립보드에 복사되었습니다.\");\r\n      navigator.clipboard.writeText(channels[nowTabKey])\r\n    }\r\n  }\r\n  //처음 렌더링 될 때 사용.\r\n  useEffect(() => {\r\n    const itemsFromBackend = []\r\n    for (var key in props.BadComments) {\r\n      itemsFromBackend.push({ id: key, content: props.BadComments[key].comment })\r\n    }\r\n  \r\n    const columnsFromBackend = {\r\n      [columnsName[0]]: {\r\n        name: columnsName[0],\r\n        items: itemsFromBackend\r\n      },\r\n      [columnsName[1]]: {\r\n        name: columnsName[1],\r\n        items: []\r\n      },\r\n      [columnsName[2]]: {\r\n        name: columnsName[2],\r\n        items: []\r\n      }\r\n    };\r\n\r\n    setColumns(columnsFromBackend);\r\n\r\n}, [])\r\n\r\n  useEffect(() => {\r\n    updateTabContents();\r\n  }, [columns]);\r\n\r\n  return (\r\n    <div style={{ display: \"flex\",alignItems: \"center\", flexDirection: \"column\"}}>\r\n      <Tabs style={{ marginBottom: \"6rem\",width: 750,}} \r\n            tabBarExtraContent={<Button onClick={() => success()}>복사하기</Button>}\r\n            onChange={(k) => setnowTabKey(k)}>\r\n        <TabPane tab={columnsName[0]} key={columnsName[0]}> {channels[columnsName[0]]} </TabPane>\r\n        <TabPane tab={columnsName[1]} key={columnsName[1]}> {channels[columnsName[1]]} </TabPane>\r\n        <TabPane tab={columnsName[2]} key={columnsName[2]}> {channels[columnsName[2]]} </TabPane>\r\n      </Tabs>\r\n      \r\n      <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" ,flexDirection: \"row\"}}>\r\n        <DragDropContext onDragEnd={result => onDragEnd(result, columns, setColumns)}>\r\n          {Object.entries(columns).map(([columnId, column], index) => {\r\n            return (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\"\r\n                }}\r\n                key={columnId}\r\n              >\r\n                <Button style={{width: 250, height: 30}} type=\"primary\">{column.name}</Button>\r\n                <div style={{ margin: 8 }}>\r\n                  <Droppable droppableId={columnId} key={columnId}>\r\n                    {(provided, snapshot) => {\r\n                      return (\r\n                        <div\r\n                          {...provided.droppableProps}\r\n                          ref={provided.innerRef}\r\n                          style={{\r\n                            background: snapshot.isDraggingOver\r\n                              ? \"lightblue\"\r\n                              : \"lightgrey\",\r\n                            padding: 4,\r\n                            width: 250,\r\n                            minHeight: 500,\r\n                          }}\r\n                        >\r\n                          {column.items.map((item, index) => {\r\n                            return (\r\n                              <Draggable\r\n                                key={item.id}\r\n                                draggableId={item.id}\r\n                                index={index}\r\n                              >\r\n                                {(provided, snapshot) => {\r\n                                  return (\r\n                                    <div\r\n                                      ref={provided.innerRef}\r\n                                      {...provided.draggableProps}\r\n                                      {...provided.dragHandleProps}\r\n                                      style={{\r\n                                        userSelect: \"none\",\r\n                                        padding: 16,\r\n                                        margin: \"0 0 8px 0\",\r\n                                        minHeight: \"50px\",\r\n                                        backgroundColor: snapshot.isDragging\r\n                                          ? \"#263B4A\"\r\n                                          : \"#456C86\",\r\n                                        color: \"white\",\r\n                                        ...provided.draggableProps.style\r\n                                      }}\r\n                                    >\r\n                                    {item.content}\r\n                                    </div>\r\n                                  );\r\n                                }}\r\n                              </Draggable>\r\n                            );\r\n                          })}\r\n                          {provided.placeholder}\r\n                        </div>\r\n                      );\r\n                    }}\r\n                  </Droppable>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DragList;\r\n","import React, { useEffect, useState } from 'react'\nimport { List, Button, message } from 'antd';\n\n\nfunction VerticalList(props) {\n    const badComments = props.badComments;\n    const [itemData, setitemData] = useState([]);\n    const [clickedAll, setClickedAll] = useState(false);\n    const [selectedItemIndex, setSelectedItemIndex] = useState([]);\n\n    useEffect(() => {\n      setDefaultItemData();\n    }, [badComments])\n\n    const setDefaultItemData = () => {\n      let tmpItemData = [];\n        for (var key in badComments) {\n          for(var key_2 in badComments[key]){\n          if (Number(badComments[key][key_2]['predict']) === 1) {\n            const tmp = {\n              channelId: key_2,\n              nickName: badComments[key][key_2]['nickname'],\n              comment: badComments[key][key_2]['comment'],\n              predict: badComments[key][key_2]['predict'],\n              selected: false,\n              style: { },\n            }\n            tmpItemData.push(tmp);\n          }\n        }\n        }\n        setitemData([...tmpItemData]);\n    }\n\n    const setAiItemData = () => {\n      let tmpItemData = [];\n        for (var key in badComments) {\n          for(var key_2 in badComments[key]){\n          if (Number(badComments[key][key_2]['predict']) !== 1) {\n            const tmp = {\n              channelId: key_2,\n              nickName: badComments[key][key_2]['nickname'],\n              comment: badComments[key][key_2]['comment'],\n              predict: badComments[key][key_2]['predict'],\n              selected: false,\n              style: { },\n            }\n            tmpItemData.push(tmp);\n          }\n        }\n        }\n        setitemData([...tmpItemData]);\n    }\n\n    const deleteItemFromIndex = (indx) => {\n      let tmpItemData = itemData;\n      let tmpSelectedItemIndex = selectedItemIndex;\n      if (tmpSelectedItemIndex.includes(indx)) {\n        setSelectedItemIndex(tmpSelectedItemIndex.slice(tmpSelectedItemIndex.indexOf(indx), 1));\n      }\n      tmpItemData.splice(indx, 1);\n      setitemData([...tmpItemData]);\n    }\n\n    const cancelItemFromIndex = (indx) => {\n      let tmpItemData = itemData;\n      tmpItemData[indx]['selected'] = false;\n      tmpItemData[indx]['style'] = { };\n      setitemData([...tmpItemData]);\n      if (selectedItemIndex.includes(indx)) {\n        let tmpSelectedItemIndex = selectedItemIndex;\n        let tmpIndx = tmpSelectedItemIndex.indexOf(indx)\n        tmpSelectedItemIndex.splice(tmpIndx, 1);\n\n        setSelectedItemIndex([...tmpSelectedItemIndex]);\n      }\n    }\n\n    const selectItemFromIndex = (indx) => {\n      let tmpItemData = itemData;\n      tmpItemData[indx]['selected'] = true;\n      tmpItemData[indx]['style'] = { backgroundColor: '#f6e199' };\n      setitemData([...tmpItemData]);\n      if (!selectedItemIndex.includes(indx)) {\n        //console.log(indx);\n        let tmpSelectedItemIndex = selectedItemIndex;\n        setSelectedItemIndex([...tmpSelectedItemIndex, indx]);\n      }\n    }\n\n    const onClickSelect = (indx) => {\n      if (itemData[indx]['selected']) {\n        cancelItemFromIndex(indx);\n      } else {\n        selectItemFromIndex(indx);\n      }\n    }\n\n    const onClickSelectAll = () => {\n      if (clickedAll === false){\n        var tmpArry = [];\n        for (var i=0; i<itemData.length; i++) {\n          tmpArry.push(i);\n          selectItemFromIndex(i);\n          setClickedAll(true);\n        }\n        setSelectedItemIndex([...tmpArry]);\n      } else {\n        for (var i=0; i<itemData.length; i++) {\n          cancelItemFromIndex(i)\n          setClickedAll(false);\n        }\n      }\n    }\n\n    const onClickDelete = (indx) => {\n      deleteItemFromIndex(indx);\n    }\n\n    const onClickCopy = () => {\n      if (selectedItemIndex.length === 0) {\n        message.error(\"선택된 댓글이 없습니다.\");\n      } else {\n        var selectedChannelId = \"\";\n        for (var i=0; i<selectedItemIndex.length; i++) {\n          selectedChannelId += \"https://www.youtube.com/channel/\" + itemData[selectedItemIndex[i]]['channelId'] + '\\n';\n        }\n        message.success(\"선택된 댓글의 채널 주소가 복사되었습니다.\");\n\n        navigator.clipboard.writeText(selectedChannelId)\n      }\n    }\n\n    const onClickDefault = () => {\n      for (var i=0; i<itemData.length; i++) {\n        cancelItemFromIndex(i)\n      }\n      setClickedAll(false);\n      setDefaultItemData();\n    }\n\n    const onClickAi = () => {\n      for (var i=0; i<itemData.length; i++) {\n        cancelItemFromIndex(i)\n      }\n      setClickedAll(false);\n      setAiItemData();\n    }\n\n    return (\n      <>\n        <div style={{ display: 'flex', marginBottom: '1rem' }}>\n          <div style={{ textAlign: 'right' }}>\n            <Button onClick={onClickDefault} style={{ marginRight: '0.5rem' }} type=\"primary\" >Default</Button>\n            <Button onClick={onClickAi} type=\"primary\" >AI (BETA)</Button>\n          </div>\n        </div>\n        <div style={{ display: 'flex', marginTop: '2rem', marginBottom: '1rem' }}>\n          <span>{selectedItemIndex.length + \"개의 댓글이 선택되었습니다.\"}</span>\n          <div style={{ marginLeft: 'auto' }}>\n            <Button onClick={onClickSelectAll} style={{ marginRight: '0.5rem' }} type=\"primary\" >All</Button>\n            <Button onClick={onClickCopy} type=\"primary\" >Copy</Button>\n          </div>\n        </div>\n        <List\n            itemLayout=\"horizontal\"\n            dataSource={itemData}\n            renderItem={item => (\n                <List.Item \n                  actions={[<a onClick={() => onClickSelect(itemData.indexOf(item))}>Select</a>, <a onClick={() => onClickDelete(itemData.indexOf(item))}>Del</a>]}\n                >\n                    <List.Item.Meta\n                        title={<a href={\"https://www.youtube.com/channel/\" + item.channelId + \"/about\"} target=\"_blank\">{item.nickName}</a>}\n                        description={<span style={item.style}>{item.comment}</span>}\n                    >\n                          \n                    </List.Item.Meta>\n                </List.Item>\n            )}>\n        </List>\n      </>\n    )\n}\n\nexport default VerticalList","import React from 'react'\nimport { RingProgress } from '@ant-design/charts';\n\nfunction Chart(props) {\n    const info = props.info;\n    const percentData = info.num_of_bad_comments / info.num_of_comments;\n\n    const config = {\n        height: 100,\n        width: 100,\n        autoFit: false,\n        percent: percentData,\n        color: ['#5B8FF9', '#E8EDF3'],\n      };\n\n    return (\n        <RingProgress style={{display: 'inline-block' }} {...config} />\n    )\n}\n\nexport default Chart\n","import React from 'react'\nimport { Typography, Statistic } from 'antd';\n\nfunction Info(props) {\n    const info = props.info;\n    \n    return (\n        <div>\n            <Statistic title=\"악성 댓글 / 전체 댓글\" value={info.num_of_bad_comments + ' / ' + info.num_of_comments} />\n            <Statistic style={{ marginTop: '1rem'}} title=\"업데이트된 시간\" value={info.updated_time} />\n        </div>\n    )\n}\n\nexport default Info\n","import React, { useEffect, useState } from 'react'\nimport { Row, Col, Spin  } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport DragList from './Sections/DragList';\nimport VerticalList from './Sections/VerticalList';\nimport Chart from './Sections/Chart';\nimport Info from './Sections/Info';\n\nconst axios = require('axios');\nconst antIcon = <LoadingOutlined style={{ fontSize: 50 }} spin />;\n\nfunction SearchPage(props) {\n    const youtubeUrl = props.location.state.youtubeUrl;\n    const youtubeId = youtubeUrl.substring(youtubeUrl.indexOf('=') + 1, youtubeUrl.indexOf('=') + 12);\n    console.log(youtubeId)\n    \n    const [channelId, setChannelId] = useState(\"\");\n    const [badComments, setBadComments] = useState({});\n    const [info, setInfo] = useState({})\n    \n    useEffect(() => {\n        // url -> id\n        const idData = {\n            id: youtubeId,\n        }\n\n        axios.get('/api/createComment/'+youtubeId)\n            .then((response) => {\n                setChannelId(response.data[0].channel_id);\n                setInfo(JSON.parse(response.data[0].info));\n                setBadComments(JSON.parse(response.data[0].bad_comments));\n            })\n            .catch((err) => {\n                console.log(err);\n            });\n    }, [])\n\n\n    if(channelId !== \"\") {\n        return (\n            <>\n                <Row>\n                    <Col style={{ textAlign: 'center' }} span={6} offset={5}>\n                        <Chart info={ info }/>\n                    </Col>\n                    <Col span={6}>\n                        <Info info={ info }/>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={12} offset={6}>\n                        \n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={12} offset={6}>\n                        <VerticalList badComments={ badComments }/>\n                    </Col>\n                </Row>\n            </>\n        )\n    } else {\n        return <div style={{\n                        display: 'flex', \n                        justifyContent: 'center', \n                        alignItems: 'center',\n                        minHeight: '100vh',\n                    }}\n                >\n                    <div style={{ textAlign: 'center' }}>\n                        <Spin style={{display: 'inline-block', marginBottom: '1rem'}} indicator={antIcon}/>\n                        <div>AI가 해당 URL을 분석 중입니다. (20초~2분)</div>\n                    </div>\n                    \n                </div>\n    }\n    \n}\n\nexport default SearchPage","import React, { Suspense } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\n\nimport LandingPage from \"./views/LandingPage/LandingPage\";\nimport SearchPage from \"./views/SearchPage/SearchPage\";\nfunction App() {\n  return (\n    <Suspense fallback={(<div>Loading...</div>)}>\n      <div style={{ paddingTop: '69px', minHeight: 'calc(100vh - 80px)' }}>\n        <Switch>\n          <Route exact path=\"/\" component={LandingPage} />\n          <Route exact path=\"/search\" component={SearchPage} />\n        </Switch>\n      </div>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();"],"sourceRoot":""}